            {/* Time Period Filters */}
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: '16px', marginBottom: '32px' }}>
              {(['All Time', 'Today', 'This Week', 'This Month'] as const).map((period) => (
                <button
                  key={period}
                  onClick={() => setSelectedTimePeriod(period)}
                  style={{
                    padding: '16px 20px',
                    backgroundColor: selectedTimePeriod === period ? '#3b82f6' : '#2a2a2a',
                    color: 'white',
                    border: selectedTimePeriod === period ? '2px solid #60a5fa' : '2px solid transparent',
                    borderRadius: '12px',
                    cursor: 'pointer',
                    fontWeight: '600',
                    fontSize: '15px',
                    transition: 'all 0.2s ease',
                    boxShadow: selectedTimePeriod === period ? '0 4px 12px rgba(59, 130, 246, 0.3)' : 'none'
                  }}
                >
                  {period}
                </button>
              ))}
            </div>

            {/* Stats Cards */}
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: '20px', marginBottom: '32px' }}>
              <div style={{
                backgroundColor: '#2a2a2a',
                padding: '24px',
                borderRadius: '16px',
                border: '1px solid #3a3a3a',
                boxShadow: '0 2px 8px rgba(0, 0, 0, 0.3)'
              }}>
                <div style={{ fontSize: '13px', color: '#9ca3af', marginBottom: '12px', fontWeight: '500', letterSpacing: '0.5px' }}>‚è±Ô∏è TOTAL SESSIONS</div>
                <div style={{ fontSize: '36px', fontWeight: 'bold', color: '#fff' }}>{dwStats.totalSessions}</div>
              </div>
              <div style={{
                backgroundColor: '#2a2a2a',
                padding: '24px',
                borderRadius: '16px',
                border: '1px solid #3a3a3a',
                boxShadow: '0 2px 8px rgba(0, 0, 0, 0.3)'
              }}>
                <div style={{ fontSize: '13px', color: '#9ca3af', marginBottom: '12px', fontWeight: '500', letterSpacing: '0.5px' }}>‚è∞ TOTAL TIME</div>
                <div style={{ fontSize: '36px', fontWeight: 'bold', color: '#fff' }}>{formatHoursMinutes(dwStats.totalMinutes)}</div>
              </div>
              <div style={{
                backgroundColor: '#2a2a2a',
                padding: '24px',
                borderRadius: '16px',
                border: '1px solid #3a3a3a',
                boxShadow: '0 2px 8px rgba(0, 0, 0, 0.3)'
              }}>
                <div style={{ fontSize: '13px', color: '#9ca3af', marginBottom: '12px', fontWeight: '500', letterSpacing: '0.5px' }}>üìä AVG SESSION</div>
                <div style={{ fontSize: '36px', fontWeight: 'bold', color: '#fff' }}>{dwStats.avgMinutes}m</div>
              </div>
              <div style={{
                backgroundColor: '#2a2a2a',
                padding: '24px',
                borderRadius: '16px',
                border: '1px solid #3a3a3a',
                boxShadow: '0 2px 8px rgba(0, 0, 0, 0.3)'
              }}>
                <div style={{ fontSize: '13px', color: '#9ca3af', marginBottom: '12px', fontWeight: '500', letterSpacing: '0.5px' }}>üìà % OF TOTAL HOURS</div>
                <div style={{ fontSize: '36px', fontWeight: 'bold', color: '#fff' }}>100%</div>
              </div>
            </div>

            {/* Area Filters */}
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(8, 1fr)', gap: '12px', marginBottom: '16px' }}>
              {dwAreaCountsArray.map(({ area, count }) => {
                const getAreaButtonColor = (areaName: string) => {
                  if (areaName === 'All Areas') return '#60a5fa'
                  if (areaName === 'Personal') return '#ec4899'
                  if (areaName === 'Full Stack') return '#10b981'
                  if (areaName === 'Huge Capital') return '#a855f7'
                  if (areaName === '808') return '#eab308'
                  if (areaName === 'S4') return '#3b82f6'
                  if (areaName === 'Golf') return '#f97316'
                  if (areaName === 'Health') return '#14b8a6'
                  return '#9ca3af'
                }

                return (
                  <button
                    key={area}
                    onClick={() => setSelectedDWArea(area as Area | 'All Areas')}
                    style={{
                      padding: '12px 20px',
                      backgroundColor: selectedDWArea === area ? getAreaButtonColor(area) : '#2a2a2a',
                      color: selectedDWArea === area ? 'white' : getAreaButtonColor(area),
                      border: selectedDWArea === area ? `2px solid ${getAreaButtonColor(area)}` : '2px solid #3a3a3a',
                      borderRadius: '10px',
                      cursor: 'pointer',
                      fontSize: '14px',
                      fontWeight: selectedDWArea === area ? '600' : '500',
                      transition: 'all 0.2s ease',
                      boxShadow: selectedDWArea === area ? `0 4px 12px ${getAreaButtonColor(area)}40` : 'none'
                    }}
                  >
                    {area} ({count})
                  </button>
                )
              })}
            </div>

            {/* Effort Level Filters */}
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(6, 1fr)', gap: '12px', marginBottom: '32px' }}>
              {Object.entries(effortLevelCounts).map(([level, count]) => {
                const getEffortLevelColor = (levelName: string) => {
                  if (levelName === 'All Levels') return '#60a5fa'
                  if (levelName === '$$$ Printer $$$') return '#22c55e'
                  if (levelName === '$ Makes Money $') return '#15803d'
                  if (levelName === '-$ Save Dat $-') return '#fb923c'
                  if (levelName === ':( No Money ):') return '#ef4444'
                  if (levelName === '8) Vibing (8') return '#a855f7'
                  return '#9ca3af'
                }

                return (
                  <button
                    key={level}
                    onClick={() => setSelectedEffortLevel(level)}
                    style={{
                      padding: '12px 20px',
                      backgroundColor: selectedEffortLevel === level ? getEffortLevelColor(level) : '#2a2a2a',
                      color: selectedEffortLevel === level ? 'white' : getEffortLevelColor(level),
                      border: selectedEffortLevel === level ? `2px solid ${getEffortLevelColor(level)}` : '2px solid #3a3a3a',
                      borderRadius: '10px',
                      cursor: 'pointer',
                      fontSize: '14px',
                      fontWeight: selectedEffortLevel === level ? '600' : '500',
                      transition: 'all 0.2s ease',
                      boxShadow: selectedEffortLevel === level ? `0 4px 12px ${getEffortLevelColor(level)}40` : 'none'
                    }}
                  >
                    {level} ({count})
                  </button>
                )
              })}
            </div>

            {/* Top 5 Tasks Cards */}
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)', gap: '12px', marginBottom: '24px' }}>
              {top5Tasks.map((item, idx) => (
                <div
                  key={idx}
                  style={{
                    backgroundColor: getAreaColor(item.area as Area),
                    padding: '16px',
                    borderRadius: '12px'
                  }}
                >
                  <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>
                    <span style={{ fontWeight: 'bold', fontSize: '14px' }}>#{idx + 1}</span>
                    <span style={{ fontSize: '12px', backgroundColor: 'rgba(0,0,0,0.3)', padding: '2px 8px', borderRadius: '4px' }}>{item.area}</span>
                  </div>
                  <div style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '4px' }}>{formatHoursMinutes(item.minutes)}</div>
                  <div style={{ fontSize: '12px', opacity: 0.9, marginBottom: '4px' }}>{item.percent}%</div>
                  <div style={{ fontSize: '12px', opacity: 0.8, marginBottom: '4px' }}>{item.sessions} sessions</div>
                  <div style={{ fontSize: '11px', opacity: 0.8, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }} title={item.taskName}>{item.taskName}</div>
                </div>
              ))}
              {top5Tasks.length === 0 && (
                <div style={{ gridColumn: '1 / -1', textAlign: 'center', color: '#6b7280', padding: '20px' }}>
                  No tasks found
                </div>
              )}
            </div>

            {/* Deep Work Hours Summary Table */}
            <div style={{
                backgroundColor: '#2a2a2a',
                padding: '24px',
                borderRadius: '12px',
                marginBottom: '24px'
              }}>
                <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginBottom: '20px' }}>Deep Work Hours Summary</h3>

                {/* Filter Controls */}
                <div style={{ display: 'flex', gap: '12px', marginBottom: '20px' }}>
                  <div style={{ flex: 1 }}>
                    <label style={{ fontSize: '12px', color: '#9ca3af', marginBottom: '6px', display: 'block' }}>Filter by Area</label>
                    <select
                      value={selectedDWArea}
                      onChange={(e) => setSelectedDWArea(e.target.value as Area | 'All Areas')}
                      style={{
                        width: '100%',
                        padding: '10px',
                        backgroundColor: '#1a1a1a',
                        color: 'white',
                        border: '1px solid #444',
                        borderRadius: '8px',
                        fontSize: '14px'
                      }}
                    >
                      <option value="All Areas">All Areas</option>
                      <option value="Full Stack">Full Stack</option>
                      <option value="S4">S4</option>
                      <option value="808">808</option>
                      <option value="Personal">Personal</option>
                      <option value="Huge Capital">Huge Capital</option>
                      <option value="Golf">Golf</option>
                      <option value="Health">Health</option>
                    </select>
                  </div>

                  <div style={{ flex: 1 }}>
                    <label style={{ fontSize: '12px', color: '#9ca3af', marginBottom: '6px', display: 'block' }}>Filter by Money Maker</label>
                    <select
                      value={selectedEffortLevel}
                      onChange={(e) => setSelectedEffortLevel(e.target.value)}
                      style={{
                        width: '100%',
                        padding: '10px',
                        backgroundColor: '#1a1a1a',
                        color: 'white',
                        border: '1px solid #444',
                        borderRadius: '8px',
                        fontSize: '14px'
                      }}
                    >
                      <option value="All Levels">All Levels</option>
                      <option value="$ Some Money">$ Some Money</option>
                      <option value="$$ Big Money">$$ Big Money</option>
                      <option value="$$$ Huge Money">$$$ Huge Money</option>
                    </select>
                  </div>
                </div>

                {/* Summary Table */}
                <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                  <thead>
                    <tr style={{ borderBottom: '2px solid #444' }}>
                      <th style={{ textAlign: 'left', padding: '12px', color: '#9ca3af', fontSize: '14px', fontWeight: '600' }}>Area</th>
                      <th style={{ textAlign: 'right', padding: '12px', color: '#9ca3af', fontSize: '14px', fontWeight: '600' }}>Today</th>
                      <th style={{ textAlign: 'right', padding: '12px', color: '#9ca3af', fontSize: '14px', fontWeight: '600' }}>This Week</th>
                      <th style={{ textAlign: 'right', padding: '12px', color: '#9ca3af', fontSize: '14px', fontWeight: '600' }}>This Month</th>
                      <th style={{ textAlign: 'right', padding: '12px', color: '#9ca3af', fontSize: '14px', fontWeight: '600' }}>All Time</th>
                    </tr>
                  </thead>
                  <tbody>
                    {(() => {
                      // Calculate hours for each area
                      const areas: Area[] = ['Full Stack', 'S4', '808', 'Personal', 'Huge Capital', 'Golf', 'Health']

                      const calculateHours = (area: Area | 'All', period: 'today' | 'week' | 'month' | 'all') => {
                        const now = new Date()
                        let startDate: Date

                        if (period === 'today') {
                          startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate())
                        } else if (period === 'week') {
                          startDate = new Date(now)
                          startDate.setDate(now.getDate() - now.getDay())
                          startDate.setHours(0, 0, 0, 0)
                        } else if (period === 'month') {
                          startDate = new Date(now.getFullYear(), now.getMonth(), 1)
                        } else {
                          startDate = new Date(0)
                        }

                        let filteredSessions = deepWorkSessions.filter(s => {
                          const sessionDate = new Date(s.start_time)
                          if (sessionDate < startDate) return false
                          if (selectedDWArea !== 'All Areas' && s.area !== selectedDWArea) return false
                          return area === 'All' || s.area === area
                        })

                        const totalMinutes = filteredSessions.reduce((sum, s) => sum + (s.duration_minutes || 0), 0)
                        return (totalMinutes / 60).toFixed(1)
                      }

                      const displayAreas = selectedDWArea === 'All Areas' ? areas : areas.filter(a => a === selectedDWArea)

                      return (
                        <>
                          {displayAreas.map(area => (
                            <tr key={area} style={{ borderBottom: '1px solid #333' }}>
                              <td style={{ padding: '12px', color: getAreaColor(area), fontWeight: '600' }}>{area}</td>
                              <td style={{ textAlign: 'right', padding: '12px', color: '#e5e7eb' }}>{calculateHours(area, 'today')}h</td>
                              <td style={{ textAlign: 'right', padding: '12px', color: '#e5e7eb' }}>{calculateHours(area, 'week')}h</td>
                              <td style={{ textAlign: 'right', padding: '12px', color: '#e5e7eb' }}>{calculateHours(area, 'month')}h</td>
                              <td style={{ textAlign: 'right', padding: '12px', color: '#e5e7eb', fontWeight: 'bold' }}>{calculateHours(area, 'all')}h</td>
                            </tr>
                          ))}
                          <tr style={{ borderTop: '2px solid #444', fontWeight: 'bold' }}>
                            <td style={{ padding: '12px', color: '#fff' }}>Total</td>
                            <td style={{ textAlign: 'right', padding: '12px', color: '#fff' }}>{calculateHours('All', 'today')}h</td>
                            <td style={{ textAlign: 'right', padding: '12px', color: '#fff' }}>{calculateHours('All', 'week')}h</td>
                            <td style={{ textAlign: 'right', padding: '12px', color: '#fff' }}>{calculateHours('All', 'month')}h</td>
                            <td style={{ textAlign: 'right', padding: '12px', color: '#fbbf24', fontSize: '16px' }}>{calculateHours('All', 'all')}h</td>
                          </tr>
                        </>
                      )
                    })()}
                  </tbody>
                </table>
              </div>

            <div style={{ backgroundColor: '#2a2a2a', padding: '24px', borderRadius: '12px' }}>
              {/* Deep Work Session Log */}
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>
                <h3 style={{ fontSize: '18px', fontWeight: 'bold' }}>Deep Work Session Log</h3>
                <button
                  onClick={startAddingNewSession}
                  style={{
                  padding: '10px 20px',
                  backgroundColor: '#f97316',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontWeight: '500',
                  fontSize: '14px'
                }}>
                  Add Deep Work Session
                </button>
              </div>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                {filteredDWSessions.length === 0 ? (
                  <div style={{ textAlign: 'center', color: '#6b7280', padding: '40px 0' }}>
                    No sessions found for the selected filters
                  </div>
                ) : (
                  filteredDWSessions.map((sessionItem, idx) => {
                    const startTime = new Date(sessionItem.start_time)
                    const endTime = sessionItem.end_time ? new Date(sessionItem.end_time) : null
                    const dateStr = startTime.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })
                    const timeStr = endTime
                      ? `${startTime.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' })} - ${endTime.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' })}`
                      : startTime.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' })

                    // Calculate actual duration from start and end times
                    const actualDurationMinutes = endTime
                      ? Math.floor((endTime.getTime() - startTime.getTime()) / (1000 * 60))
                      : sessionItem.duration_minutes || 0

                    return (
                      <div
                        key={idx}
                        onDoubleClick={() => startEditingSession(sessionItem)}
                        style={{
                          backgroundColor: getAreaColor(sessionItem.area as Area),
                          padding: '16px',
                          borderRadius: '8px',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '16px',
                          cursor: 'pointer'
                        }}
                      >
                        <div style={{ flex: '0 0 120px' }}>
                          <div style={{ fontSize: '13px', opacity: 0.9 }}>üìÖ {dateStr}</div>
                        </div>
                        <div style={{ flex: '0 0 150px' }}>
                          <div style={{ fontSize: '13px', opacity: 0.9 }}>üïê {timeStr}</div>
                        </div>
                        <div style={{ flex: '0 0 80px' }}>
                          <div style={{ fontSize: '13px', fontWeight: 'bold' }}>‚è±Ô∏è {formatHoursMinutes(actualDurationMinutes)}</div>
                        </div>
                        <div style={{ flex: '0 0 140px' }}>
                          <span style={{
                            backgroundColor: getAreaColor(sessionItem.area as Area),
                            color: 'white',
                            padding: '4px 12px',
                            borderRadius: '12px',
                            fontSize: '12px',
                            fontWeight: '500',
                            display: 'inline-block',
                            whiteSpace: 'nowrap'
                          }}>{sessionItem.area}</span>
                        </div>
                        <div style={{ flex: '0 0 140px' }}>
                          <span style={{
                            backgroundColor: '#f59e0b',
                            color: 'white',
                            padding: '4px 12px',
                            borderRadius: '12px',
                            fontSize: '12px',
                            fontWeight: '500',
                            display: 'inline-block',
                            whiteSpace: 'nowrap'
                          }}>{sessionItem.task_type || 'N/A'}</span>
                        </div>
                        <div style={{ flex: '0 0 200px' }}>
                          <span style={{ backgroundColor: 'rgba(255,255,255,0.9)', color: '#000', padding: '4px 10px', borderRadius: '4px', fontSize: '12px', fontWeight: '500' }}>
                            {sessionItem.task?.task_name || 'Unknown Task'}
                          </span>
                        </div>
                        <div style={{ flex: 1 }}>
                          <span style={{
                            backgroundColor: sessionItem.effort_level ? getEffortLevelColor(sessionItem.effort_level) : 'rgba(0,0,0,0.2)',
